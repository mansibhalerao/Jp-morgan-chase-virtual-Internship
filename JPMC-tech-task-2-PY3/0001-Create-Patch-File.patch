From 4d4310ffaad5f8186f77ec2aa5bd66e6a7a93852 Mon Sep 17 00:00:00 2001
From: mansibhalerao <mansibhalerao16@gmail.com>
Date: Sun, 31 May 2020 10:36:36 +0530
Subject: [PATCH] Create Patch File

---
 datafeed/server.py |  2 +-
 src/App.tsx        | 25 ++++++++++++++++++++-----
 src/Graph.tsx      | 18 +++++++++++++++---
 3 files changed, 36 insertions(+), 9 deletions(-)

diff --git a/datafeed/server.py b/datafeed/server.py
index 2ffad43..eca8c0f 100644
--- a/datafeed/server.py
+++ b/datafeed/server.py
@@ -214,7 +214,7 @@ def run(routes, host = '0.0.0.0', port = 8080):
     thread = threading.Thread(target = server.serve_forever)
     thread.daemon = True
     thread.start()
-    print 'HTTP server started on port 8080'
+    print ('HTTP server started on port 8080')
     while True:
         from time import sleep
         sleep(1)
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..de1d08f 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: Boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph : false,
     };
   }
 
@@ -29,18 +31,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if(this.state.showGraph){
     return (<Graph data={this.state.data}/>)
+
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+
+    let x=0;
+    const interval = setInterval(() => {
+     DataStreamer.getData((serverResponds : ServerRespond[]) =>{
+          this.setState({
+              data: serverResponds,
+              showGraph : true,
+          });
+          });
+        
+     x++;
+     if(x>1000){
+       clearInterval(interval);
+     }
+    },100 );
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..9481dbb 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -13,8 +13,9 @@ interface IProps {
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
+ * to the `PerspectiveViewerElement` to behave like an HTMLElement
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +33,8 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    // since perspectiveviewerelement extends htmlelement , we make the definition of the const elem simpler.
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -47,8 +49,18 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
+      //more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      //aggregates is used to handle duplicate values
+      elem.setAttribute('aggregates',`
+      {"stock":"distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price":"avg",
+    "timestamp":"distinct count"}`);
     }
   }
 
-- 
2.20.1.windows.1

